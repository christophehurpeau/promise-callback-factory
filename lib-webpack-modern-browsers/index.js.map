{"version":3,"sources":["../src/index.js"],"names":["resolveFromCallback","resolve","reject","err","result","Error","promiseCallback","callback","Promise"],"mappings":";AACA;;;;;;;;AAQA,OAAO,SAASA,mBAAT,CAA6BC,OAA7B,EAAsCC,MAAtC,EAA8C;AACnD,SAAO,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC5B,QAAID,GAAJ,EAAS;AACP,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,cAAM,IAAIE,KAAJ,CAAUF,GAAV,CAAN;AACD;;AAED,aAAOD,OAAOC,GAAP,CAAP;AACD;AACDF,YAAQG,MAAR;AACD,GATD;AAUD;;AAED;;;;;;;;;;;;;;;AAeA,eAAe,SAASE,eAAT,CAAyBC,QAAzB,EAAsD;AACnE,SAAO,IAAIC,OAAJ,CAAY,UAACP,OAAD,EAAUC,MAAV,EAAqB;AACtCK,aAASP,oBAAoBC,OAApB,EAA6BC,MAA7B,CAAT;AACD,GAFM,CAAP;AAGD","file":"index.js","sourcesContent":["\n/**\n * Creates a callback that resolve or reject a promise\n * according to the default callback convention in node: (err, result)\n *\n * @param {Function} resolve resolve function of the promise\n * @param {Function} reject reject function of the promise\n * @return {Function}\n */\nexport function resolveFromCallback(resolve, reject) {\n  return function (err, result) {\n    if (err) {\n      if (typeof err === 'string') {\n        err = new Error(err);\n      }\n\n      return reject(err);\n    }\n    resolve(result);\n  };\n}\n\n/**\n * Returns a promise\n *\n * The first argument is a callback with a done node-style callback\n *\n * @example\n * import promiseCallback from 'promise-callback-factory';\n * promiseCallback(done => fs.readFile('./myFile.txt', done))\n *   .then((txtContentBuffer) => {\n *     console.log(txtContentBuffer.toString());\n *   });\n *\n * @param {Function} callback callback((done) => {})\n * @return {Promise}\n */\nexport default function promiseCallback(callback: Function): Promise {\n  return new Promise((resolve, reject) => {\n    callback(resolveFromCallback(resolve, reject));\n  });\n}\n"]}