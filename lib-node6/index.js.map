{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;QASgB,mB,GAAA,mB;kBA4BQ,e;;;;;;;;;;AA5BjB,SAAS,mBAAT,CAA6B,OAA7B,EAAsC,MAAtC,EAA8C;AACjD,WAAO,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC1B,YAAI,GAAJ,EAAS;AACL,gBAAI,OAAO,GAAP,KAAe,QAAnB,EAA6B;AACzB,sBAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACH;;AAED,mBAAO,OAAO,GAAP,CAAP;AACH;AACD,gBAAQ,MAAR;AACH,KATD;AAUH;;;;;;;;;;;;;;;;;AAiBc,SAAS,eAAT,CAAyB,QAAzB,EAAsD;AACjE,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAqB;AACpC,iBAAS,oBAAoB,OAApB,EAA6B,MAA7B,CAAT;AACH,KAFM,CAAP;AAGH","file":"index.js","sourcesContent":["\n/**\n * Creates a callback that resolve or reject a promise\n * according to the default callback convention in node: (err, result)\n *\n * @param {Function} resolve resolve function of the promise\n * @param {Function} reject reject function of the promise\n * @return {Function}\n */\nexport function resolveFromCallback(resolve, reject) {\n    return function (err, result) {\n        if (err) {\n            if (typeof err === 'string') {\n                err = new Error(err);\n            }\n\n            return reject(err);\n        }\n        resolve(result);\n    };\n}\n\n/**\n * Returns a promise\n *\n * The first argument is a callback with a done node-style callback\n *\n * @example\n * import promiseCallback from 'promise-callback-factory';\n * promiseCallback(done => fs.readFile('./myFile.txt', done))\n *   .then((txtContentBuffer) => {\n *     console.log(txtContentBuffer.toString());\n *   });\n *\n * @param {Function} callback callback((done) => {})\n * @return {Promise}\n */\nexport default function promiseCallback(callback: Function): Promise {\n    return new Promise((resolve, reject) => {\n        callback(resolveFromCallback(resolve, reject));\n    });\n}\n"]}